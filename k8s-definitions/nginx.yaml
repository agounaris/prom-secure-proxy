apiVersion: v1
kind: Secret
metadata:
  name: thanos-basic-auth
  namespace: default
type: Opaque
data:
  # Generate with: htpasswd -nb username password | base64
  # Example: admin:$apr1$xyz... (base64 encoded)
  auth: YWRtaW46JGFwcjEkaUZwMjVRUk4kSWkxS2lRbGtISi4zMEtacHh6OS5FLwoK
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: default
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
      worker_connections 1024;
    }
    
    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;
      
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
      
      access_log /var/log/nginx/access.log main;
      sendfile on;
      keepalive_timeout 65;
      
      server {
        listen 8080;
        server_name _;
        
        # Basic authentication
        auth_basic "Thanos Query";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        location / {
          proxy_pass http://thanos-query:9090/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_http_version 1.1;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-query-proxy
  namespace: default
  labels:
    app: thanos-query-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: thanos-query-proxy
  template:
    metadata:
      labels:
        app: thanos-query-proxy
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: auth
          mountPath: /etc/nginx/.htpasswd
          subPath: auth
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: auth
        secret:
          secretName: thanos-basic-auth
          items:
          - key: auth
            path: auth
---
apiVersion: v1
kind: Service
metadata:
  name: thanos-query-proxy
  namespace: default
  labels:
    app: thanos-query-proxy
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: thanos-query-proxy
